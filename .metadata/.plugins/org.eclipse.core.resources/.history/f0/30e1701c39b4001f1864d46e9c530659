package model;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Model {

	public static void lanzarSimulacionMT(String stringtype, int n, File dir)
	{
		int type =Integer.parseInt(stringtype);
		SimulacionMT simulador = new SimulacionMT(type, n, dir);
		Thread hilo = new Thread (simulador);
		hilo.start();
	}
	public static void LaunchMultiprocess(String type, int i, File dir)
	{
	String clase = "calculadoraMP.calcularProteinas"; //ruta de la clase que se lanza
	try {
		String javaHome = System.getProperty("java.home"); //ruta de java
		String javaBin = javaHome + File.separator+"bin"+File.separator+"java"; //ruta del bin de java
		String classPath = System.getProperty("java.class.path");
		String className = clase;
		//construir comando
		List<String> command = new ArrayList<>();
		command.add(javaBin);	
		command.add("-cp");	
		command.add(classPath);	
		command.add(className);
		//parametros concretos para la funcion
		command.add(type);	
		command.add(String.valueOf(i));
		command.add(dir.getAbsolutePath());
		//lanzar processbuilder
		ProcessBuilder builder = new ProcessBuilder(command);
		Process process = builder.inheritIO().start();
		
	}
	catch(Exception ex)
		{
		ex.printStackTrace();
		}
	
	}
	/*
	public boolean checkComplete(File dir, int total)
	{	
		double startTime = System.currentTimeMillis();
		  boolean completed = false;

		    // Verificar si el número de archivos en el directorio es igual al total esperado
		    if (dir.list() != null && dir.list().length == total) {
		    	 Pattern pattern = Pattern.compile("\\d\\.");
		    	for (int i = 0; i<total;i++)
		    	{
		    	
		        try {
		            String[] files = dir.list();
		            File lastFile = new File(dir, files[i]);

		            // Leer el último archivo y obtener su última línea
		            String lastLine = null;
		            try (BufferedReader br = new BufferedReader(new FileReader(lastFile))) {
		                String line;
		                while ((line = br.readLine()) != null) {
		                    lastLine = line;  // Guardamos la última línea leída
		                }
		            }

		            // Verificar si la última línea no es null (archivo no está vacío)
		            if (lastLine != null) {	             
		                // Expresión regular para verificar que la línea contiene un dígito seguido de un punto
		               
		                Matcher matcher = pattern.matcher(lastLine);

		                if (matcher.find()) {
		                	//boorrar
		                	
		                    completed = true;
		                }
		                else
		                {
		                	completed=false;
		                	return completed;
		                }
		            } 
		        } catch (IOException e) {
		            e.printStackTrace();
		        }
		        
		    	}
		    	
		    }
		    if (completed==true)
		    {
		    				double endTime = System.currentTimeMillis();
		                	System.out.println(endTime-startTime);
		    }
		    return completed;
	}
	*/
	public double checkComplete(File dir, int total)
	{	
		double startTime = System.currentTimeMillis();
		 

		    // Verificar si el número de archivos en el directorio es igual al total esperado
		    if (dir.list() != null && dir.list().length == total) {
		    	 Pattern pattern = Pattern.compile("\\d\\.");
		    	for (int i = 0; i<total;i++)
		    	{
		    	
		        try {
		            String[] files = dir.list();
		            File lastFile = new File(dir, files[i]);

		            // Leer el último archivo y obtener su última línea
		            String lastLine = null;
		            try (BufferedReader br = new BufferedReader(new FileReader(lastFile))) {
		                String line;
		                while ((line = br.readLine()) != null) {
		                    lastLine = line;  // Guardamos la última línea leída
		                }
		            }

		            // Verificar si la última línea no es null (archivo no está vacío)
		            if (lastLine != null) {	             
		                // Expresión regular para verificar que la línea contiene un dígito seguido de un punto
		               
		                Matcher matcher = pattern.matcher(lastLine);

		                if (!matcher.find()) {
		                	//boorrar
		                	
		                	return 0;		           
		                	}
		                
		            } 
		        } catch (IOException e) {
		            e.printStackTrace();
		        }
		        
		    	}
		    	
		    }
		    else
		    {
		    	return 0;
		    }
		   double endTime = System.currentTimeMillis();
		   return endTime-startTime;
		  
	}
}
