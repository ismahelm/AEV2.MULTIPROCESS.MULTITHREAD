package model;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Model {

	public static void lanzarSimulacionMT(String stringtype, int n, File dir)
	{
		int type =Integer.parseInt(stringtype);
		SimulacionMT simulador = new SimulacionMT(type, n, dir);
		Thread hilo = new Thread (simulador);
		hilo.start();
	}
	public static void LaunchMultiprocess(String type, int i, File dir)
	{
	String clase = "calculadoraMP.calcularProteinas"; //ruta de la clase que se lanza
	try {
		String javaHome = System.getProperty("java.home"); //ruta de java
		String javaBin = javaHome + File.separator+"bin"+File.separator+"java"; //ruta del bin de java
		String classPath = System.getProperty("java.class.path");
		String className = clase;
		//construir comando
		List<String> command = new ArrayList<>();
		command.add(javaBin);	
		command.add("-cp");	
		command.add(classPath);	
		command.add(className);
		//parametros concretos para la funcion
		command.add(type);	
		command.add(String.valueOf(i));
		command.add(dir.getAbsolutePath());
		//lanzar processbuilder
		ProcessBuilder builder = new ProcessBuilder(command);
		Process process = builder.inheritIO().start();
		
	}
	catch(Exception ex)
		{
		ex.printStackTrace();
		}
	
	}
	public boolean checkComplete(File dir, int total)
	{	
		boolean completed = false;
				if (dir.list().length==total)
				{
				
				
		        try{
		        	String[] files = dir.list();
		            File lastFile = new File(dir, files[files.length - 1]);
		        	String lastLine = null;
		        	FileReader r = new FileReader (lastFile);
		        	BufferedReader br = new BufferedReader(r);
		            String line;
		            while ((line = br.readLine()) != null) {
		                lastLine = line;  // Guardamos la última línea leída
		            }
		            System.out.println(lastLine);
		            Pattern pattern = Pattern.compile("\\d\\.");
	                Matcher matcher = pattern.matcher(lastLine);		       
	                if (matcher.find())
	                {
	                	System.out.println("okii");
	                	completed=true;
	                }
	                }
		        
		         catch (IOException e) {
		            e.printStackTrace();
		        }
		        completed=true;
				}
		return completed;
	}
}
