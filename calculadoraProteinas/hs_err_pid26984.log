#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 65536 bytes. Error detail: Failed to commit metaspace.
# Possible reasons:
#   The system is out of physical RAM or swap space
#   This process is running with CompressedOops enabled, and the Java Heap may be blocking the growth of the native heap
# Possible solutions:
#   Reduce memory load on the system
#   Increase physical memory or swap space
#   Check if swap backing store is full
#   Decrease Java heap size (-Xmx/-Xms)
#   Decrease number of Java threads
#   Decrease Java thread stack sizes (-Xss)
#   Set larger code cache with -XX:ReservedCodeCacheSize=
#   JVM is running with Zero Based Compressed Oops mode in which the Java heap is
#     placed in the first 32GB address space. The Java Heap base address is the
#     maximum limit for the native heap growth. Please use -XX:HeapBaseMinAddress
#     to set the Java Heap base and to place the Java Heap above 32GB virtual address.
# This output file may be truncated or incomplete.
#
#  Out of Memory Error (virtualSpaceNode.cpp:112), pid=26984, tid=39480
#
# JRE version: Java(TM) SE Runtime Environment (22.0.2+9) (build 22.0.2+9-70)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (22.0.2+9-70, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# No core dump will be written. Minidumps are not enabled by default on client versions of Windows
#

---------------  S U M M A R Y ------------

Command Line: calculadoraMP.calcularProteinas 2 114 C:\Users\Ismael\Desktop\DAM\2º\servicios y procesos\aev2\calculadoraProteinas\.\docs\20241207_012931_847\MP

Host: AMD Ryzen 5 5500                               , 12 cores, 15G,  Windows 11 , 64 bit Build 22621 (10.0.22621.4391)
Time: Sat Dec  7 01:29:46 2024 Hora estándar romance elapsed time: 6.628515 seconds (0d 0h 0m 6s)

---------------  T H R E A D  ---------------

Current thread (0x00000213877bfeb0):  JavaThread "main"             [_thread_in_vm, id=39480, stack(0x000000caa8e00000,0x000000caa8f00000) (1024K)]

Stack: [0x000000caa8e00000,0x000000caa8f00000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0x6e26e9]  (no source info available)
V  [jvm.dll+0x875753]  (no source info available)
V  [jvm.dll+0x877b7e]  (no source info available)
V  [jvm.dll+0x878253]  (no source info available)
V  [jvm.dll+0x27fc86]  (no source info available)
V  [jvm.dll+0x87139e]  (no source info available)
V  [jvm.dll+0x685755]  (no source info available)
V  [jvm.dll+0x6857ba]  (no source info available)
V  [jvm.dll+0x687ffa]  (no source info available)
V  [jvm.dll+0x224f6c]  (no source info available)
V  [jvm.dll+0x68616e]  (no source info available)
V  [jvm.dll+0x6973d9]  (no source info available)
V  [jvm.dll+0x6905ce]  (no source info available)
V  [jvm.dll+0x3da721]  (no source info available)
C  0x0000021398a3bdac  (no source info available)

The last pc belongs to method entry point (kind = zerolocals) (printed below).
Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j  java.lang.invoke.LambdaForm.argument(ILjava/lang/invoke/LambdaForm$BasicType;)Ljava/lang/invoke/LambdaForm$Name;+0 java.base@22.0.2
j  java.lang.invoke.LambdaForm.arguments(ILjava/lang/invoke/MethodType;)[Ljava/lang/invoke/LambdaForm$Name;+35 java.base@22.0.2
j  java.lang.invoke.DirectMethodHandle.makePreparedLambdaForm(Ljava/lang/invoke/MethodType;I)Ljava/lang/invoke/LambdaForm;+418 java.base@22.0.2
j  java.lang.invoke.DirectMethodHandle.preparedLambdaForm(Ljava/lang/invoke/MethodType;I)Ljava/lang/invoke/LambdaForm;+17 java.base@22.0.2
j  java.lang.invoke.DirectMethodHandle.preparedLambdaForm(Ljava/lang/invoke/MemberName;Z)Ljava/lang/invoke/LambdaForm;+159 java.base@22.0.2
j  java.lang.invoke.DirectMethodHandle.preparedLambdaForm(Ljava/lang/invoke/MemberName;)Ljava/lang/invoke/LambdaForm;+2 java.base@22.0.2
j  java.lang.invoke.DirectMethodHandle.make(BLjava/lang/Class;Ljava/lang/invoke/MemberName;Ljava/lang/Class;)Ljava/lang/invoke/DirectMethodHandle;+163 java.base@22.0.2
j  java.lang.invoke.MethodHandles$Lookup.getDirectMethodCommon(BLjava/lang/Class;Ljava/lang/invoke/MemberName;ZZLjava/lang/invoke/MethodHandles$Lookup;)Ljava/lang/invoke/MethodHandle;+220 java.base@22.0.2
j  java.lang.invoke.MethodHandles$Lookup.getDirectMethodNoSecurityManager(BLjava/lang/Class;Ljava/lang/invoke/MemberName;Ljava/lang/invoke/MethodHandles$Lookup;)Ljava/lang/invoke/MethodHandle;+14 java.base@22.0.2
j  java.lang.invoke.MethodHandles$Lookup.getDirectMethodForConstant(BLjava/lang/Class;Ljava/lang/invoke/MemberName;)Ljava/lang/invoke/MethodHandle;+31 java.base@22.0.2
j  java.lang.invoke.MethodHandles$Lookup.linkMethodHandleConstant(BLjava/lang/Class;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/invoke/MethodHandle;+153 java.base@22.0.2
j  java.lang.invoke.MethodHandleNatives.linkMethodHandleConstant(Ljava/lang/Class;ILjava/lang/Class;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/invoke/MethodHandle;+38 java.base@22.0.2
v  ~StubRoutines::call_stub 0x0000021398a3100d
j  java.time.ZoneOffset.ofTotalSeconds(I)Ljava/time/ZoneOffset;+37 java.base@22.0.2
j  java.time.ZoneOffset.<clinit>()V+33 java.base@22.0.2
v  ~StubRoutines::call_stub 0x0000021398a3100d
j  java.time.Clock$SystemClock.<clinit>()V+4 java.base@22.0.2
v  ~StubRoutines::call_stub 0x0000021398a3100d
j  java.time.Clock.systemDefaultZone()Ljava/time/Clock;+0 java.base@22.0.2
j  java.time.LocalDateTime.now()Ljava/time/LocalDateTime;+0 java.base@22.0.2
j  calculadoraMP.calcularProteinas.Simulate(IILjava/io/File;)D+0
j  calculadoraMP.calcularProteinas.main([Ljava/lang/String;)V+28
v  ~StubRoutines::call_stub 0x0000021398a3100d
method entry point (kind = zerolocals)  [0x0000021398a3bbc0, 0x0000021398a3bf88]  968 bytes
